'use client';
'use strict';

var core = require('@mantine/core');
var useCss = require('./use-css.cjs');

function getStylesRef(refName) {
  return `___ref-${refName || ""}`;
}
function getBreakpointValue(theme, breakpoint) {
  return breakpoint in theme.breakpoints && typeof breakpoint !== "number" ? core.px(theme.breakpoints[breakpoint]) : core.px(breakpoint);
}
const getHelpers = (theme) => ({
  light: '[data-mantine-color-scheme="light"] &',
  dark: '[data-mantine-color-scheme="dark"] &',
  rtl: '[dir="rtl"] &',
  ltr: '[dir="ltr"] &',
  notRtl: '[dir="ltr"] &',
  notLtr: '[dir="rtl"] &',
  ref: getStylesRef,
  smallerThan: (breakpoint) => `@media (max-width: ${core.em(getBreakpointValue(theme, breakpoint) - 0.1)})`,
  largerThan: (breakpoint) => `@media (min-width: ${core.em(getBreakpointValue(theme, breakpoint))})`
});
function createStyles(input) {
  const getCssObject = typeof input === "function" ? input : () => input;
  return function useStyles(params) {
    const theme = core.useMantineTheme();
    const helpers = getHelpers(theme);
    const cssObject = getCssObject(theme, params, helpers);
    const { css, cx } = useCss.useCss();
    const classes = Object.keys(cssObject).reduce((acc, key) => {
      acc[key] = css(cssObject[key]);
      return acc;
    }, {});
    return { classes, cx, theme };
  };
}

exports.createStyles = createStyles;
exports.getHelpers = getHelpers;
exports.getStylesRef = getStylesRef;
//# sourceMappingURL=create-styles.cjs.map
