'use client';
'use strict';

var core = require('@mantine/core');
var createStyles = require('./create-styles.cjs');
var useCss = require('./use-css.cjs');

function sxTransform() {
  const theme = core.useMantineTheme();
  const { css } = useCss.useCss();
  return (sx) => {
    const parsedSx = typeof sx === "function" ? sx(theme, createStyles.getHelpers(theme)) : sx;
    return !parsedSx ? "" : css(parsedSx);
  };
}
function stylesTransform() {
  const theme = core.useMantineTheme();
  const { css } = useCss.useCss();
  return (styles, payload) => {
    if (!styles) {
      return {};
    }
    const stylesObject = typeof styles === "function" ? styles(theme, payload.props, createStyles.getHelpers(theme)) : styles;
    return Object.keys(stylesObject).reduce((acc, key) => {
      const value = stylesObject[key];
      const parsedValue = typeof value === "function" ? value(theme) : value;
      return { ...acc, [key]: css(parsedValue) };
    }, {});
  };
}
const emotionTransform = {
  sx: sxTransform,
  styles: stylesTransform
};

exports.emotionTransform = emotionTransform;
//# sourceMappingURL=emotion-transform.cjs.map
